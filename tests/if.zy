// infix if and if-else

(assert (== (infixExpand {if 1 == 2 { 3 } else { 4 }})  (quote (quote (cond (== 1 2) (infix [3]) (infix [4]))))))
(assert (== (str (infixExpand {if 1 == 2 { 3 }})) (str (quote (quote (cond (== 1 2) {3} nil))))))

(assert (== (infixExpand { a = 10; b = 12 }) (quote (quote (set a 10) (set b 12)))))

(infixExpand { a = 10; b = 0; if a < 9 { b++ } else { b += 10  }})

(infixExpand { a = 10; b = 0; { if a < 9 { b++ } else { b += 10  }   (assert (== b 10)) }})

// this next omits the else terms when parsing, and the 2nd then.
{ a = 10;  b = 0;  if a < 9 {    b++  } else {    b += 10  }  (assert (== b 10))  ;  if a > 9 {    b++  }  (assert (== b 11)) }

// reduced version
{ if a < 9 {    b++  } else {    b += 10  }  (assert (== b 10))  ;  if a > 9 {    b++  }  (assert (== b 11)) }


// parses okay with semicolons added:
{ a=10; b=0; if a < 9 {    b++  } else {    b += 10  };  (assert (== b 10))  ;  if a > 9 {    b++  };  (assert (== b 11)) }

// except that the if doesn't get turned into a cond.

// this next omits the else terms when parsing, or the 2nd then
{ a = 10;
  b = 0;
  if a < 9 {
    b++
  } else {
    b += 10
  }
  (assert (== b 10))
  ;
  if a > 9 {
    b++
  }
  (assert (== b 11))
}
