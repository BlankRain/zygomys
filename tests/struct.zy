// verify that struct assign typechecks
(struct Dog [
        (field Name:          string     e:0)
        (field Number:          int64     e:1)
        ])
(def d (Dog Name:"Rover"))
(def e (Dog Name:"Egbert"))

(d = e)
(assert (== d.Name "Egbert"))
(expectError "cannot assign int64 to Dog" (e = 12))
(f = 4)
(expectError "cannot assign Dog to int64" (f = d))

(struct Cat [(field Nip:          string     e:0)])
(c = (Cat Nip:"green"))

(expectError "cannot assign Cat to Dog" (d = c))
(expectError "cannot assign Dog to Cat" (c = d))

(var cc Cat)
(cc = c)

// type checking the fields of a struct
(expectError "Error calling 'Dog': field Dog.Name is string, cannot assign int64 '12'" (Dog Name:12))
(expectError `Error calling 'Dog': field Dog.Number is int64, cannot assign string '"hello"'` (Dog Number:"hello"))
(expectError `Error calling 'Dog': Dog has no field 'NotHere' [err 2]` (Dog NotHere:"hello"))

