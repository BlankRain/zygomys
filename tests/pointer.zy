;; to point to non-records in a persistent fashion.
(var a int64)
(ptr = (& a))
(assert (== 0 a))
(assert (== a 0))

(ptr2 = (&a))
(assert (== ptr ptr2))


(var s string)
(assert (== s ""))
(assert (== "" s))

(sptr = (& s))
&a
&s

(ptr2 = (& a))
ptr2

;; deref-set is a setter that is equivalent to *ptr = 1 in Go.
(deref-set ptr 1)
(assert (== 1 a))

;; deref with only 1 argument is a getter; same as (* ptr)
(assert (== 1 (deref ptr)))
(assert (== 1 (deref ptr2)))
(assert (== 1 (* ptr)))
(assert (== 1 (* ptr2)))

;; set a string through a pointer
(deref-set sptr "hiya")
(assert (== s "hiya"))

;; cross type assignment doesn't type check
(expect-error "Error calling 'deref-set': type mismatch: value of type 'int64' is not assignable to type 'string'" (deref-set sptr 3))
(expect-error "Error calling 'deref-set': type mismatch: value of type 'string' is not assignable to 'int64'" (deref-set ptr "a-string"))


;; set a struct through a pointer
(struct Dog [
        (field Name:          string     e:0)
        (field Number:          int64     e:1)
        ])
(def d (Dog Name:"Rover"))

(pdog = (& d))
(deref-set pdog (Dog Name:"Benicia"))
(assert (== (.d.Name) "Benicia"))

(expect-error "Error calling 'deref-set': cannot assign type 'Dog' to type 'string'" (deref-set sptr d))
(expect-error "Error calling 'deref-set': type mismatch: value of type 'string' is not assignable to 'Dog'" (deref-set pdog "hi"))
(deref-set pdog (Dog Name:"Rov2"))

(struct Cat [(field Name:string)])

(expect-error "Error calling 'deref-set': cannot assign type 'Cat' to type 'Dog'"
              (deref-set pdog (Cat Name:"meower")))

(var pcat (* Cat))
(expect-error "Error calling 'deref-set': cannot assign type 'Cat' to type '*Cat'"
              (deref-set pcat (Cat Name:"James")))

(pcat = (& (Cat Name:"Earl")))
(assert (== (:Name (* pcat)) "Earl"))

(expect-error "Error calling 'deref-set': cannot assign type 'Dog' to type 'Cat'"
              (deref-set pcat (Dog Name:"barker")))

