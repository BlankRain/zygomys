// sigil system. allow sigils to
// designate special symbols, to
// represent various types of special
// symbols: objects, type variables, grammar non-terminals,
// etc.

(#symbol = "I'm a sigil-symbol")
(expectError "cannot assign int64 to string" (#symbol = 23))
($symbol = "I'm a sigil-symbol")
(?symbol = "I'm a sigil-symbol")

// can a: always be a sigil-symbol, colon style,
// so that it prints without extra rigamorole.
(a: = 1)

// sigils should eval to themselves
(assert (== $a %$a))

/*
// dotsymbols always evaluate to themselves

// (def) on a dot-symbol is illegal
(def a 9)
//(def .a 3)
(assert (== .a %.a))
(assert (== a 9))


// (set) on dot symbols is an error - can't test this under script yet, since no wait to try-catch.
(set a 3)
(expectError "Error generating (set .a 5):\nillegal to set dot-symbol, attempted on '.a'" (set .a 5))
(assert (== a 3))


//
// nested paths of dot-symbols work
//
(def s (snoopy asst: (hornet sidekick: (hellcat fname:"henry" lname:"johnson"))))

// get
(assert (== (.s.asst.sidekick.fname) "henry"))

// assign
(.s.asst.sidekick.lname = "smith")
(assert (== (.s.asst.sidekick.lname) "smith"))

*/